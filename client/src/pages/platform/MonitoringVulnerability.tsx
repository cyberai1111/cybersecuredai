import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Skeleton } from "@/components/ui/skeleton";
import { useQuery } from "@tanstack/react-query";
import { 
  Eye, 
  Shield, 
  Activity, 
  AlertTriangle, 
  CheckCircle, 
  Clock,
  Target,
  TrendingUp,
  Database,
  Network,
  Settings,
  BarChart3,
  Zap,
  Server,
  Monitor,
  Bot,
  ExternalLink,
  AlertCircle
} from "lucide-react";
import { useAuth } from "@/hooks/useAuth";

export default function MonitoringVulnerability() {
  const { user } = useAuth();

  // Fetch vulnerability intelligence data
  const { data: nistData, isLoading: nistLoading } = useQuery({
    queryKey: ['/api/vulnerabilities/nist'],
  });

  const { data: cveData, isLoading: cveLoading } = useQuery({
    queryKey: ['/api/vulnerabilities/cve'],
  });

  const { data: cisaKevData, isLoading: cisaKevLoading } = useQuery({
    queryKey: ['/api/vulnerabilities/cisa-kev'],
  });
  
  const monitoringMetrics = [
    { metric: "Endpoints Monitored", value: "12,847", description: "Across all connected systems" },
    { metric: "Uptime Guarantee", value: "99.9%", description: "Service availability SLA" },
    { metric: "Detection Time", value: "< 2 min", description: "Average threat detection" },
    { metric: "Vulnerability Coverage", value: "98.4%", description: "Known CVE detection rate" }
  ];

  const monitoringCapabilities = [
    {
      title: "Continuous Endpoint Monitoring",
      description: "24/7 real-time monitoring of all endpoints including workstations, servers, and mobile devices",
      coverage: 99.7,
      features: ["Real-time agent monitoring", "System health tracking", "Performance metrics", "Security status"],
      icon: <Monitor className="w-6 h-6" />,
      color: "text-cyan-400"
    },
    {
      title: "Vulnerability Scanning",
      description: "Automated vulnerability assessment with prioritized remediation recommendations",
      coverage: 94.2,
      features: ["Daily vulnerability scans", "Risk-based prioritization", "Patch management", "Compliance mapping"],
      icon: <Target className="w-6 h-6" />,
      color: "text-orange-400"
    }
  ];

  return (
    <div className="ai-dashboard-bg min-h-screen p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header Section */}
        <header className="mb-8">
          <div className="flex items-center space-x-4 mb-6">
            <div className="w-12 h-12 bg-gradient-to-r from-cyan-400 to-blue-500 rounded-lg flex items-center justify-center">
              <Eye className="w-6 h-6 text-white" />
            </div>
            <div>
              <div className="flex items-center space-x-3 mb-2">
                <h1 className="text-4xl font-bold text-white">24/7 Monitoring & Vulnerability Management</h1>
                <Badge className="bg-gradient-to-r from-cyan-500 to-blue-500 text-white">24/7</Badge>
              </div>
              <p className="text-gray-300 text-lg">
                Around-the-clock vulnerability detection and remediation for all endpoints
              </p>
            </div>
          </div>

          <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
            {monitoringMetrics.map((metric, index) => (
              <div key={index} className="bg-surface/50 rounded-lg p-4 border border-surface-light">
                <div className="text-2xl font-bold text-white mb-1">{metric.value}</div>
                <div className="text-sm text-gray-400 mb-1">{metric.metric}</div>
                <div className="text-xs text-cyan-400">{metric.description}</div>
              </div>
            ))}
          </div>

          <div className="flex items-center space-x-4">
            <Badge variant="outline" className="text-cyan-400 border-cyan-400/50">
              Custom pricing available
            </Badge>
            <Badge variant="outline" className="text-green-400 border-green-400/50">
              Continuous monitoring
            </Badge>
            <Badge variant="outline" className="text-purple-400 border-purple-400/50">
              Automated remediation
            </Badge>
          </div>
        </header>

        {/* Comprehensive Monitoring Capabilities */}
        <section className="mb-8">
          <h2 className="text-3xl font-bold text-white mb-8 flex items-center">
            <Activity className="w-8 h-8 mr-3 text-cyan-400" />
            Comprehensive Monitoring Capabilities
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {monitoringCapabilities.map((capability, index) => (
              <Card key={index} className="bg-surface/50 border-surface-light">
                <CardHeader>
                  <div className="flex items-center space-x-3 mb-4">
                    <div className={`${capability.color}`}>{capability.icon}</div>
                    <CardTitle className="text-white text-xl">{capability.title}</CardTitle>
                  </div>
                  <p className="text-gray-400">{capability.description}</p>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-400">Coverage Rate</span>
                      <span className="text-sm font-semibold text-white">{capability.coverage}%</span>
                    </div>
                    <Progress value={capability.coverage} className="h-2" />
                    <div className="space-y-2 pt-2 border-t border-surface-light">
                      {capability.features.map((feature, featureIndex) => (
                        <div key={featureIndex} className="flex items-center space-x-2">
                          <CheckCircle className="w-3 h-3 text-green-400 flex-shrink-0" />
                          <span className="text-gray-300 text-sm">{feature}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </section>

        {/* Vulnerability Intelligence Dashboard */}
        <section className="mb-8">
          <h2 className="text-3xl font-bold text-white mb-8 flex items-center">
            <Shield className="w-8 h-8 mr-3 text-red-400" />
            Vulnerability Intelligence
          </h2>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
            {/* NIST National Vulnerability Database */}
            <Card className="bg-surface/50 border-surface-light">
              <CardHeader className="pb-4">
                <div className="flex items-center justify-between">
                  <CardTitle className="text-white text-lg flex items-center">
                    <Database className="w-5 h-5 mr-2 text-blue-400" />
                    NIST NVD
                  </CardTitle>
                  <Badge variant="outline" className="text-blue-400 border-blue-400/50">
                    Live
                  </Badge>
                </div>
              </CardHeader>
              <CardContent>
                {nistLoading ? (
                  <div className="space-y-3">
                    <Skeleton className="h-8 w-20" />
                    <Skeleton className="h-4 w-32" />
                    <Skeleton className="h-4 w-24" />
                  </div>
                ) : (
                  <div className="space-y-4">
                    <div className="text-center">
                      <div className="text-2xl font-bold text-white">{nistData?.totalVulnerabilities?.toLocaleString()}</div>
                      <div className="text-sm text-gray-400">Total CVEs</div>
                    </div>
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div className="text-center p-2 bg-red-500/10 rounded">
                        <div className="font-semibold text-red-400">{nistData?.criticalSeverity}</div>
                        <div className="text-gray-400 text-xs">Critical</div>
                      </div>
                      <div className="text-center p-2 bg-orange-500/10 rounded">
                        <div className="font-semibold text-orange-400">{nistData?.highSeverity}</div>
                        <div className="text-gray-400 text-xs">High</div>
                      </div>
                    </div>
                    <div className="text-xs text-gray-500">
                      Last updated: {nistData?.lastUpdated ? new Date(nistData.lastUpdated).toLocaleDateString() : '--'}
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* CVE Details */}
            <Card className="bg-surface/50 border-surface-light">
              <CardHeader className="pb-4">
                <div className="flex items-center justify-between">
                  <CardTitle className="text-white text-lg flex items-center">
                    <Target className="w-5 h-5 mr-2 text-orange-400" />
                    CVE Details
                  </CardTitle>
                  <Badge variant="outline" className="text-orange-400 border-orange-400/50">
                    Active
                  </Badge>
                </div>
              </CardHeader>
              <CardContent>
                {cveLoading ? (
                  <div className="space-y-3">
                    <Skeleton className="h-8 w-20" />
                    <Skeleton className="h-4 w-32" />
                    <Skeleton className="h-4 w-24" />
                  </div>
                ) : (
                  <div className="space-y-4">
                    <div className="text-center">
                      <div className="text-2xl font-bold text-white">{cveData?.totalCVEs?.toLocaleString()}</div>
                      <div className="text-sm text-gray-400">Total CVEs</div>
                    </div>
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div className="text-center p-2 bg-red-500/10 rounded">
                        <div className="font-semibold text-red-400">{cveData?.exploitableCount}</div>
                        <div className="text-gray-400 text-xs">Exploitable</div>
                      </div>
                      <div className="text-center p-2 bg-yellow-500/10 rounded">
                        <div className="font-semibold text-yellow-400">{cveData?.newThisMonth}</div>
                        <div className="text-gray-400 text-xs">New/Month</div>
                      </div>
                    </div>
                    <div className="text-xs text-gray-500">
                      Last sync: {cveData?.lastSync ? new Date(cveData.lastSync).toLocaleDateString() : '--'}
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* CISA Known Exploited Vulnerabilities */}
            <Card className="bg-surface/50 border-surface-light border-red-500/30">
              <CardHeader className="pb-4">
                <div className="flex items-center justify-between">
                  <CardTitle className="text-white text-lg flex items-center">
                    <AlertTriangle className="w-5 h-5 mr-2 text-red-400" />
                    CISA KEV
                  </CardTitle>
                  <Badge variant="outline" className="text-red-400 border-red-400/50">
                    Critical
                  </Badge>
                </div>
              </CardHeader>
              <CardContent>
                {cisaKevLoading ? (
                  <div className="space-y-3">
                    <Skeleton className="h-8 w-20" />
                    <Skeleton className="h-4 w-32" />
                    <Skeleton className="h-4 w-24" />
                  </div>
                ) : (
                  <div className="space-y-4">
                    <div className="text-center">
                      <div className="text-2xl font-bold text-red-400">{cisaKevData?.totalKnownExploited?.toLocaleString()}</div>
                      <div className="text-sm text-gray-400">Known Exploited</div>
                    </div>
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div className="text-center p-2 bg-red-500/10 rounded">
                        <div className="font-semibold text-red-400">{cisaKevData?.newThisWeek}</div>
                        <div className="text-gray-400 text-xs">New/Week</div>
                      </div>
                      <div className="text-center p-2 bg-purple-500/10 rounded">
                        <div className="font-semibold text-purple-400">{cisaKevData?.emergencyDirectives}</div>
                        <div className="text-gray-400 text-xs">Emergency</div>
                      </div>
                    </div>
                    <div className="text-xs text-gray-500">
                      Last updated: {cisaKevData?.lastUpdated ? new Date(cisaKevData.lastUpdated).toLocaleDateString() : '--'}
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Recent Critical Vulnerabilities */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Recent NIST CVEs */}
            <Card className="bg-surface/50 border-surface-light">
              <CardHeader>
                <CardTitle className="text-white flex items-center">
                  <Database className="w-5 h-5 mr-2 text-blue-400" />
                  Recent NIST CVEs
                </CardTitle>
              </CardHeader>
              <CardContent>
                {nistLoading ? (
                  <div className="space-y-3">
                    {[1, 2].map((i) => (
                      <div key={i} className="space-y-2">
                        <Skeleton className="h-4 w-24" />
                        <Skeleton className="h-3 w-full" />
                        <Skeleton className="h-3 w-20" />
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="space-y-4">
                    {nistData?.recentCVEs?.map((cve: any, index: number) => (
                      <div key={index} className="border-l-2 border-blue-400/30 pl-4 space-y-2">
                        <div className="flex items-center justify-between">
                          <div className="font-semibold text-blue-400">{cve.id}</div>
                          <Badge variant={cve.severity === 'CRITICAL' ? 'destructive' : 'secondary'} className="text-xs">
                            {cve.severity}
                          </Badge>
                        </div>
                        <div className="text-sm text-gray-300">{cve.description}</div>
                        <div className="flex items-center justify-between text-xs text-gray-500">
                          <span>CVSS: {cve.score}</span>
                          <span>{new Date(cve.publishedDate).toLocaleDateString()}</span>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>

            {/* CISA KEV Urgent */}
            <Card className="bg-surface/50 border-surface-light border-red-500/30">
              <CardHeader>
                <CardTitle className="text-white flex items-center">
                  <AlertCircle className="w-5 h-5 mr-2 text-red-400" />
                  CISA Urgent Actions Required
                </CardTitle>
              </CardHeader>
              <CardContent>
                {cisaKevLoading ? (
                  <div className="space-y-3">
                    {[1, 2].map((i) => (
                      <div key={i} className="space-y-2">
                        <Skeleton className="h-4 w-24" />
                        <Skeleton className="h-3 w-full" />
                        <Skeleton className="h-3 w-20" />
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="space-y-4">
                    {cisaKevData?.urgentVulnerabilities?.map((vuln: any, index: number) => (
                      <div key={index} className="border-l-2 border-red-400/50 pl-4 space-y-2">
                        <div className="flex items-center justify-between">
                          <div className="font-semibold text-red-400">{vuln.cveId}</div>
                          <div className="flex items-center space-x-2">
                            {vuln.knownRansomwareCampaignUse === 'Known' && (
                              <Badge variant="destructive" className="text-xs">
                                Ransomware
                              </Badge>
                            )}
                            <Badge variant="outline" className="text-xs text-red-400 border-red-400/50">
                              Due: {new Date(vuln.dueDate).toLocaleDateString()}
                            </Badge>
                          </div>
                        </div>
                        <div className="text-sm text-gray-300">{vuln.vulnerabilityName}</div>
                        <div className="text-xs text-gray-400">{vuln.shortDescription}</div>
                        <div className="text-xs text-orange-400 font-medium">{vuln.requiredAction}</div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </section>
      </div>
    </div>
  );
}