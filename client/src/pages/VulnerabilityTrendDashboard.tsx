import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ScrollArea } from "@/components/ui/scroll-area";
import { 
  Activity, 
  TrendingUp, 
  TrendingDown, 
  AlertTriangle, 
  Shield, 
  Clock, 
  Target,
  Brain,
  BarChart3,
  Zap,
  Calendar,
  PieChart,
  LineChart,
  Database,
  Eye,
  Settings
} from "lucide-react";

interface VulnerabilityPrediction {
  targetDate: Date;
  predictedCount: number;
  severityPrediction: Record<string, number>;
  riskScore: number;
  confidence: number;
  topPredictedCWEs: Array<{ cweId: string; probability: number; description: string }>;
  trend: 'increasing' | 'decreasing' | 'stable';
  recommendation: string;
}

interface VulnerabilityTrend {
  period: string;
  count: number;
  severityDistribution: Record<string, number>;
  topCWEs: Array<{ cweId: string; count: number; description: string }>;
  avgScore: number;
  exploitability: number;
  impact: number;
}

interface PredictionModel {
  type: string;
  accuracy: number;
  confidence: number;
  lastTrained: Date;
  features: string[];
  weights: number[];
}

export default function VulnerabilityTrendDashboard() {
  const [selectedTab, setSelectedTab] = useState("predictions");
  const [selectedTimeframe, setSelectedTimeframe] = useState("3months");

  // Fetch vulnerability predictions
  const { data: predictions = [], isLoading: predictionsLoading } = useQuery<VulnerabilityPrediction[]>({
    queryKey: ["/api/vulnerability/predictions"],
    refetchInterval: 300000, // Refresh every 5 minutes
  });

  // Fetch historical trends
  const { data: trends = [], isLoading: trendsLoading } = useQuery<VulnerabilityTrend[]>({
    queryKey: ["/api/vulnerability/trends"],
    refetchInterval: 300000,
  });

  // Fetch prediction models status
  const { data: models = [], isLoading: modelsLoading } = useQuery<PredictionModel[]>({
    queryKey: ["/api/vulnerability/models"],
    refetchInterval: 600000, // Refresh every 10 minutes
  });

  // Fetch system status
  const { data: status = {} } = useQuery<any>({
    queryKey: ["/api/vulnerability/status"],
    refetchInterval: 30000,
  });

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical': return 'text-red-500';
      case 'high': return 'text-orange-500';
      case 'medium': return 'text-yellow-500';
      case 'low': return 'text-blue-500';
      default: return 'text-gray-500';
    }
  };

  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case 'increasing': return <TrendingUp className="w-4 h-4 text-red-500" />;
      case 'decreasing': return <TrendingDown className="w-4 h-4 text-green-500" />;
      case 'stable': return <Activity className="w-4 h-4 text-blue-500" />;
      default: return <Activity className="w-4 h-4 text-gray-500" />;
    }
  };

  const getRiskScoreColor = (score: number) => {
    if (score >= 8) return 'text-red-500';
    if (score >= 6) return 'text-orange-500';
    if (score >= 4) return 'text-yellow-500';
    return 'text-green-500';
  };

  const formatDate = (date: Date | string) => {
    const d = typeof date === 'string' ? new Date(date) : date;
    return d.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });
  };

  const filteredTrends = trends.slice(
    selectedTimeframe === "6months" ? -6 : 
    selectedTimeframe === "1year" ? -12 : -3
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-white p-6">
      <div className="max-w-7xl mx-auto space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-purple-400 to-cyan-400 bg-clip-text text-transparent">
              AI Vulnerability Trend Prediction
            </h1>
            <p className="text-slate-400 mt-2">Machine learning powered vulnerability forecasting and risk analysis</p>
          </div>
          <div className="flex items-center space-x-4">
            <Badge variant="outline" className="border-purple-500 text-purple-400">
              <Brain className="w-4 h-4 mr-2" />
              AI Powered
            </Badge>
            <Badge variant="outline" className="border-green-500 text-green-400">
              {status.vulnerabilityCount || 0} CVEs Analyzed
            </Badge>
          </div>
        </div>

        {/* Status Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <Card className="bg-slate-800 border-slate-700">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-slate-400 text-sm">Model Accuracy</p>
                  <p className="text-2xl font-bold">{((status.modelAccuracy || 0) * 100).toFixed(1)}%</p>
                </div>
                <Target className="h-8 w-8 text-purple-400" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-slate-800 border-slate-700">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-slate-400 text-sm">Active Models</p>
                  <p className="text-2xl font-bold">{models.length}</p>
                </div>
                <Brain className="h-8 w-8 text-cyan-400" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-slate-800 border-slate-700">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-slate-400 text-sm">Next Risk Level</p>
                  <p className={`text-2xl font-bold ${getRiskScoreColor(predictions[0]?.riskScore || 0)}`}>
                    {predictions[0]?.riskScore?.toFixed(1) || '0.0'}
                  </p>
                </div>
                <AlertTriangle className="h-8 w-8 text-orange-400" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-slate-800 border-slate-700">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-slate-400 text-sm">Prediction Confidence</p>
                  <p className="text-2xl font-bold">{((predictions[0]?.confidence || 0) * 100).toFixed(0)}%</p>
                </div>
                <Shield className="h-8 w-8 text-green-400" />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Main Dashboard */}
        <Tabs value={selectedTab} onValueChange={setSelectedTab} className="space-y-6">
          <TabsList className="bg-slate-800 border-slate-700">
            <TabsTrigger value="predictions" className="data-[state=active]:bg-slate-700">
              <Brain className="w-4 h-4 mr-2" />
              AI Predictions
            </TabsTrigger>
            <TabsTrigger value="trends" className="data-[state=active]:bg-slate-700">
              <BarChart3 className="w-4 h-4 mr-2" />
              Historical Trends
            </TabsTrigger>
            <TabsTrigger value="models" className="data-[state=active]:bg-slate-700">
              <Settings className="w-4 h-4 mr-2" />
              ML Models
            </TabsTrigger>
          </TabsList>

          <TabsContent value="predictions" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Future Predictions */}
              <Card className="bg-slate-800 border-slate-700">
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Calendar className="w-5 h-5" />
                    <span>3-Month Forecast</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {predictions.map((prediction, index) => (
                      <div key={index} className="flex items-center justify-between p-4 rounded-lg bg-slate-700/50">
                        <div className="flex-1">
                          <div className="flex items-center space-x-2 mb-2">
                            <span className="font-medium">{formatDate(prediction.targetDate)}</span>
                            {getTrendIcon(prediction.trend)}
                            <Badge variant="outline" className="text-xs">
                              {prediction.trend}
                            </Badge>
                          </div>
                          <div className="text-sm text-slate-400">
                            Predicted: {prediction.predictedCount} vulnerabilities
                          </div>
                          <div className="flex items-center space-x-2 mt-2">
                            <span className="text-xs text-slate-500">Risk Score:</span>
                            <span className={`text-sm font-medium ${getRiskScoreColor(prediction.riskScore)}`}>
                              {prediction.riskScore.toFixed(1)}/10
                            </span>
                          </div>
                        </div>
                        <div className="text-right">
                          <div className="text-lg font-bold">{(prediction.confidence * 100).toFixed(0)}%</div>
                          <div className="text-xs text-slate-400">Confidence</div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Severity Predictions */}
              <Card className="bg-slate-800 border-slate-700">
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <PieChart className="w-5 h-5" />
                    <span>Severity Distribution Forecast</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {predictions[0] && (
                    <div className="space-y-4">
                      {Object.entries(predictions[0].severityPrediction).map(([severity, percentage]) => (
                        <div key={severity} className="space-y-2">
                          <div className="flex justify-between">
                            <span className={`capitalize ${getSeverityColor(severity)}`}>{severity}</span>
                            <span className="text-sm">{(percentage * 100).toFixed(1)}%</span>
                          </div>
                          <Progress value={percentage * 100} className="h-2" />
                        </div>
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* Top Predicted CWEs */}
              <Card className="lg:col-span-2 bg-slate-800 border-slate-700">
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Target className="w-5 h-5" />
                    <span>Predicted Top Vulnerability Types</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {predictions[0] && (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {predictions[0].topPredictedCWEs.map((cwe, index) => (
                        <div key={cwe.cweId} className="flex items-center space-x-3 p-3 rounded-lg bg-slate-700/50">
                          <div className="w-8 h-8 rounded-full bg-gradient-to-r from-purple-500 to-cyan-500 flex items-center justify-center text-sm font-bold">
                            {index + 1}
                          </div>
                          <div className="flex-1">
                            <div className="font-medium">{cwe.cweId}</div>
                            <div className="text-sm text-slate-400">{cwe.description}</div>
                          </div>
                          <div className="text-right">
                            <div className="text-sm font-medium">{(cwe.probability * 100).toFixed(1)}%</div>
                            <div className="text-xs text-slate-500">Probability</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* AI Recommendations */}
              <Card className="lg:col-span-2 bg-slate-800 border-slate-700">
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Zap className="w-5 h-5" />
                    <span>AI Recommendations</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {predictions[0] && (
                    <div className="p-4 rounded-lg bg-gradient-to-r from-purple-900/20 to-cyan-900/20 border border-purple-500/20">
                      <p className="text-slate-300">{predictions[0].recommendation}</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="trends" className="space-y-6">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-xl font-semibold">Historical Vulnerability Trends</h3>
              <div className="flex space-x-2">
                <Button
                  variant={selectedTimeframe === "3months" ? "default" : "outline"}
                  size="sm"
                  onClick={() => setSelectedTimeframe("3months")}
                >
                  3 Months
                </Button>
                <Button
                  variant={selectedTimeframe === "6months" ? "default" : "outline"}
                  size="sm"
                  onClick={() => setSelectedTimeframe("6months")}
                >
                  6 Months
                </Button>
                <Button
                  variant={selectedTimeframe === "1year" ? "default" : "outline"}
                  size="sm"
                  onClick={() => setSelectedTimeframe("1year")}
                >
                  1 Year
                </Button>
              </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Vulnerability Count Trend */}
              <Card className="bg-slate-800 border-slate-700">
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <LineChart className="w-5 h-5" />
                    <span>Vulnerability Count Trend</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="h-64 bg-slate-900 rounded-lg flex items-center justify-center">
                    <div className="text-center">
                      <BarChart3 className="w-12 h-12 text-slate-500 mx-auto mb-4" />
                      <p className="text-slate-400">Vulnerability count trend visualization</p>
                      <p className="text-sm text-slate-500 mt-2">
                        Showing {filteredTrends.length} months of data
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Average Severity Score */}
              <Card className="bg-slate-800 border-slate-700">
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <TrendingUp className="w-5 h-5" />
                    <span>Average Severity Score</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {filteredTrends.slice(-6).map((trend, index) => (
                      <div key={trend.period} className="flex items-center justify-between">
                        <span className="text-sm">{trend.period}</span>
                        <div className="flex items-center space-x-2">
                          <div className="w-16 bg-slate-700 rounded-full h-2">
                            <div 
                              className="bg-gradient-to-r from-yellow-500 to-red-500 h-2 rounded-full"
                              style={{ width: `${(trend.avgScore / 10) * 100}%` }}
                            />
                          </div>
                          <span className="text-sm text-slate-400 w-12">{trend.avgScore.toFixed(1)}</span>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Historical CWE Distribution */}
              <Card className="lg:col-span-2 bg-slate-800 border-slate-700">
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Database className="w-5 h-5" />
                    <span>Top CWEs by Period</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ScrollArea className="h-64">
                    <div className="space-y-4">
                      {filteredTrends.slice(-3).map((trend) => (
                        <div key={trend.period} className="p-4 rounded-lg bg-slate-700/50">
                          <div className="flex items-center justify-between mb-3">
                            <h4 className="font-medium">{trend.period}</h4>
                            <Badge variant="outline">{trend.count} vulnerabilities</Badge>
                          </div>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                            {trend.topCWEs.slice(0, 4).map((cwe, index) => (
                              <div key={cwe.cweId} className="flex items-center justify-between text-sm">
                                <span className="text-slate-300">{cwe.cweId}</span>
                                <span className="text-slate-400">{cwe.count}</span>
                              </div>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>
                  </ScrollArea>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="models" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Model Performance */}
              <Card className="bg-slate-800 border-slate-700">
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Brain className="w-5 h-5" />
                    <span>ML Model Performance</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {models.map((model) => (
                      <div key={model.type} className="p-4 rounded-lg bg-slate-700/50">
                        <div className="flex items-center justify-between mb-2">
                          <span className="font-medium capitalize">{model.type} Model</span>
                          <Badge variant="outline" className="text-xs">
                            {model.features.length} features
                          </Badge>
                        </div>
                        <div className="space-y-2">
                          <div className="flex justify-between text-sm">
                            <span className="text-slate-400">Accuracy</span>
                            <span className="text-green-400">{(model.accuracy * 100).toFixed(1)}%</span>
                          </div>
                          <Progress value={model.accuracy * 100} className="h-2" />
                          <div className="flex justify-between text-sm">
                            <span className="text-slate-400">Confidence</span>
                            <span className="text-blue-400">{(model.confidence * 100).toFixed(1)}%</span>
                          </div>
                          <Progress value={model.confidence * 100} className="h-2" />
                        </div>
                        <div className="text-xs text-slate-500 mt-2">
                          Last trained: {new Date(model.lastTrained).toLocaleDateString()}
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Feature Importance */}
              <Card className="bg-slate-800 border-slate-700">
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Target className="w-5 h-5" />
                    <span>Feature Importance</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {models[0] && (
                    <div className="space-y-3">
                      {models[0].features.map((feature, index) => (
                        <div key={feature} className="space-y-1">
                          <div className="flex justify-between text-sm">
                            <span className="text-slate-300 capitalize">{feature.replace(/_/g, ' ')}</span>
                            <span className="text-slate-400">{(models[0].weights[index] * 100).toFixed(0)}%</span>
                          </div>
                          <Progress value={models[0].weights[index] * 100} className="h-2" />
                        </div>
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* System Status */}
              <Card className="lg:col-span-2 bg-slate-800 border-slate-700">
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Activity className="w-5 h-5" />
                    <span>Prediction Engine Status</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div className="text-center p-4 rounded-lg bg-slate-700/50">
                      <div className="text-2xl font-bold text-green-400">{status.vulnerabilityCount || 0}</div>
                      <div className="text-sm text-slate-400">CVEs Analyzed</div>
                    </div>
                    <div className="text-center p-4 rounded-lg bg-slate-700/50">
                      <div className="text-2xl font-bold text-blue-400">{status.modelsLoaded || 0}</div>
                      <div className="text-sm text-slate-400">Models Loaded</div>
                    </div>
                    <div className="text-center p-4 rounded-lg bg-slate-700/50">
                      <div className="text-2xl font-bold text-purple-400">
                        {status.initialized ? 'Online' : 'Offline'}
                      </div>
                      <div className="text-sm text-slate-400">Engine Status</div>
                    </div>
                    <div className="text-center p-4 rounded-lg bg-slate-700/50">
                      <div className="text-2xl font-bold text-cyan-400">
                        {status.lastUpdate ? new Date(status.lastUpdate).toLocaleTimeString() : 'N/A'}
                      </div>
                      <div className="text-sm text-slate-400">Last Update</div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}